openapi: 3.0.3
info:
  title: Ackify API
  description: |
    RESTful API for the Ackify document signature acknowledgment system.

    ## Features
    - OAuth2 authentication with multiple providers (Google, GitHub, GitLab, custom)
    - Ed25519 cryptographic signatures with hash chain validation
    - Document metadata management with checksum verification
    - Expected signers tracking with email reminders
    - Admin dashboard for document management
    - Multilingual support (fr, en, es, de, it)

    ## Architecture
    - **Backend**: Go with clean architecture (domain, application, infrastructure, presentation)
    - **Frontend**: Vue.js 3 SPA with TypeScript and Tailwind CSS
    - **Database**: PostgreSQL with UNIQUE constraints and triggers
    - **Security**: Ed25519 signatures, SHA-256 hashing, CSP headers

    ## Authentication Flow
    1. Frontend calls `/api/v1/auth/start` to initiate OAuth2 flow
    2. User is redirected to OAuth provider (Google, GitHub, GitLab, or custom)
    3. Provider redirects back to `/api/v1/auth/callback` with authorization code
    4. Backend exchanges code for access token and creates session cookie
    5. Subsequent API calls use session cookie (`ackify-session`) for authentication

    ## CSRF Protection
    - All state-modifying operations (POST, PUT, DELETE) require CSRF token
    - Obtain token via `GET /api/v1/csrf`
    - Include token in `X-CSRF-Token` header for protected requests
    - Session cookie automatically validates CSRF token

    ## Base URL Structure
    - **API v1**: `/api/v1/*` - All REST API endpoints
    - **OAuth2 callback**: `/api/v1/auth/callback` - OAuth provider redirect
    - **oEmbed discovery**: `/oembed` - oEmbed endpoint at root level (not under /api/v1)
    - **Frontend SPA**: `/` - Vue.js application served at root
    - **Embed widget**: `/embed?doc=<docId>` - Embeddable signature widget
  version: 1.0.0
  license:
    name: AGPL-3.0-or-later
    url: https://www.gnu.org/licenses/agpl-3.0.html
  contact:
    name: Ackify Community Edition
    url: https://github.com/btouchard/ackify-ce

servers:
  - url: http://localhost:8080/api/v1
    description: Local development server (API v1 endpoints)
  - url: https://your-domain.com/api/v1
    description: Production server (API v1 endpoints - configure with your domain)
  - url: http://localhost:8080
    description: Local development server (root-level endpoints - /oembed only)
  - url: https://your-domain.com
    description: Production server (root-level endpoints - /oembed only)

tags:
  - name: System
    description: System health and status endpoints
  - name: Auth
    description: OAuth2 authentication and session management
  - name: Users
    description: User profile and information
  - name: Documents
    description: Public document endpoints (no admin privileges required)
  - name: Signatures
    description: Signature creation and retrieval
  - name: Embedding
    description: oEmbed and widget embedding endpoints for integration in modern editors
  - name: Admin
    description: Administrative endpoints (requires admin privileges)

paths:
  /health:
    get:
      summary: Health check
      operationId: getHealth
      tags:
        - System
      security: []  # Public endpoint - no authentication required
      servers:
        - url: http://localhost:8080/api/v1
        - url: https://your-domain.com/api/v1
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /openapi.json:
    get:
      summary: Get OpenAPI specification
      operationId: getOpenAPISpec
      tags:
        - System
      security: []  # Public endpoint - no authentication required
      servers:
        - url: http://localhost:8080/api/v1
        - url: https://your-domain.com/api/v1
      responses:
        '200':
          description: OpenAPI specification in JSON format
          content:
            application/json:
              schema:
                type: object
                description: Complete OpenAPI 3.0 specification

  /auth/callback:
    get:
      summary: OAuth2 callback endpoint
      description: Handles OAuth2 provider callbacks after successful authentication
      operationId: oauthCallback
      tags:
        - Auth
      security: []  # Public endpoint - OAuth2 callback (authenticated by provider)
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
          description: Authorization code from OAuth provider
        - name: state
          in: query
          required: true
          schema:
            type: string
          description: State parameter for CSRF protection
      responses:
        '302':
          description: Redirect to application after successful authentication
        '400':
          description: Bad request (invalid code or state)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /oembed:
    get:
      summary: oEmbed endpoint for automatic embed discovery
      description: |
        Returns oEmbed-compliant JSON for automatic widget embedding in modern editors.

        **How it works:**
        1. User pastes a document URL (e.g., `https://your-domain.com/?doc=policy_2025`) in Notion, Outline, Confluence, etc.
        2. The editor discovers this endpoint via the `<link rel="alternate" type="application/json+oembed">` meta tag
        3. The editor calls `/oembed?url=https://your-domain.com/?doc=policy_2025`
        4. This endpoint returns JSON with an iframe pointing to `/embed?doc=policy_2025`
        5. The editor displays the embedded signature widget

        **Supported platforms:** Notion, Outline, Confluence, AppFlowy, and any platform supporting oEmbed discovery.
      operationId: getOEmbed
      tags:
        - Embedding
      security: []  # Public endpoint - no authentication required for oEmbed discovery
      servers:
        - url: http://localhost:8080
        - url: https://your-domain.com
      parameters:
        - name: url
          in: query
          required: true
          schema:
            type: string
            format: uri
          description: Full document URL (must contain `doc` parameter)
          example: "http://localhost:8080/?doc=policy_2025"
      responses:
        '200':
          description: oEmbed JSON response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OEmbedResponse'
              example:
                type: "rich"
                version: "1.0"
                title: "Document policy_2025 - Confirmations de lecture"
                provider_name: "Ackify"
                provider_url: "http://localhost:8080"
                html: "<iframe src=\"http://localhost:8080/embed?doc=policy_2025\" width=\"100%\" height=\"200\" frameborder=\"0\" style=\"border: 1px solid #ddd; border-radius: 6px;\" allowtransparency=\"true\"></iframe>"
                height: 200
        '400':
          description: Bad request (missing or invalid URL parameter)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /csrf:
    get:
      summary: Get CSRF token
      operationId: getCsrfToken
      tags:
        - Auth
      security: []  # Public endpoint - CSRF token available to all
      responses:
        '200':
          description: CSRF token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CsrfTokenResponse'

  /auth/start:
    post:
      summary: Start OAuth2 authentication flow
      operationId: startOAuth
      tags:
        - Auth
      security: []  # Public endpoint - initiates authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                redirectTo:
                  type: string
                  description: URL to redirect after authentication
      responses:
        '302':
          description: Redirect to OAuth provider
        '400':
          $ref: '#/components/responses/BadRequest'

  /auth/logout:
    get:
      summary: Logout current user
      operationId: logout
      tags:
        - Auth
      security:
        - sessionCookie: []
      responses:
        '200':
          description: Successfully logged out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /auth/check:
    get:
      summary: Check authentication status
      operationId: checkAuth
      tags:
        - Auth
      security:
        - sessionCookie: []
      responses:
        '200':
          description: Authentication status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthStatusResponse'

  /users/me:
    get:
      summary: Get current user information
      operationId: getCurrentUser
      tags:
        - Users
      security:
        - sessionCookie: []
      responses:
        '200':
          description: Current user info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
              example:
                data:
                  id: "google-oauth2|123456789"
                  email: "user@example.com"
                  name: "John Doe"
                  isAdmin: false
        '401':
          $ref: '#/components/responses/Unauthorized'

  /documents:
    get:
      summary: List documents
      description: |
        Retrieve a paginated list of all public documents.
        Supports search filtering by title or description.
      operationId: listDocuments
      tags:
        - Documents
      security: []  # Public endpoint - anyone can list documents
      parameters:
        - name: page
          in: query
          description: Page number (1-indexed)
          schema:
            type: integer
            default: 1
            minimum: 1
          example: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          example: 20
        - name: search
          in: query
          description: Search query to filter documents by title or description
          schema:
            type: string
          example: "privacy policy"
      responses:
        '200':
          description: List of documents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentListResponse'
              example:
                data:
                  - id: "privacy_policy_2025"
                    title: "Company Privacy Policy 2025"
                    description: "Updated privacy policy for GDPR compliance"
                    signatureCount: 42
                    expectedSignerCount: 50
                    createdAt: "2025-01-15T10:30:00Z"
                  - id: "code_of_conduct"
                    title: "Employee Code of Conduct"
                    description: "Code of conduct for all employees"
                    signatureCount: 150
                    expectedSignerCount: 200
                    createdAt: "2025-01-10T09:00:00Z"
                meta:
                  page: 1
                  limit: 20
                  total: 2
                  totalPages: 1

  /documents/{docId}:
    get:
      summary: Get document details
      operationId: getDocument
      tags:
        - Documents
      security: []  # Public endpoint - anyone can view document details
      parameters:
        - name: docId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Document details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /documents/{docId}/signatures:
    get:
      summary: Get document signatures
      operationId: getDocumentSignatures
      tags:
        - Documents
      security: []  # Public endpoint - signatures are publicly visible
      parameters:
        - name: docId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of signatures
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignatureListResponse'

  /documents/{docId}/expected-signers:
    get:
      summary: Get expected signers for document
      operationId: getExpectedSigners
      tags:
        - Documents
      security: []  # Public endpoint - expected signers are publicly visible
      parameters:
        - name: docId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of expected signers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpectedSignersResponse'

  /signatures:
    get:
      summary: Get user's signatures
      operationId: getUserSignatures
      tags:
        - Signatures
      security:
        - sessionCookie: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: User's signatures
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignatureListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      summary: Create a signature
      description: |
        Create a cryptographic signature for a document.

        **Important:**
        - User must be authenticated
        - One signature per user per document (enforced by UNIQUE constraint)
        - Ed25519 signature is generated server-side
        - SHA-256 hash chain ensures integrity
        - Returns 409 Conflict if user already signed this document
      operationId: createSignature
      tags:
        - Signatures
      security:
        - sessionCookie: []
      parameters:
        - name: X-CSRF-Token
          in: header
          required: true
          description: CSRF token obtained from /api/v1/csrf
          schema:
            type: string
          example: "abc123def456"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSignatureRequest'
            example:
              docId: "privacy_policy_2025"
              referer: "https://github.com/company/repo/pull/123"
      responses:
        '201':
          description: Signature created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignatureResponse'
              example:
                data:
                  id: "12345"
                  docId: "privacy_policy_2025"
                  userEmail: "user@example.com"
                  userName: "John Doe"
                  signedAt: "2025-01-15T10:30:00Z"
                  signature: "YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFy"
                  payloadHash: "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
                  nonce: "1234567890abcdef"
                  prevHash: "a1b2c3d4e5f6789a1b2c3d4e5f6789a1b2c3d4e5f6789a1b2c3d4e5f6789a1b2"
                  serviceInfo:
                    name: "GitHub"
                    type: "git-hosting"
                    referrer: "https://github.com/company/repo/pull/123"
                  docTitle: "Company Privacy Policy 2025"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: Conflict - User already signed this document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: "DUPLICATE_SIGNATURE"
                  message: "You have already signed this document"
                  details:
                    docId: "privacy_policy_2025"
                    existingSignatureId: "12345"

  /documents/find-or-create:
    get:
      summary: Find or create document by reference
      description: |
        Searches for a document by reference (URL, path, or identifier).
        - Returns existing document if found (no authentication required)
        - Creates new document if not found (authentication required)
      operationId: findOrCreateDocument
      tags:
        - Documents
      security: []  # Partially public - read public, create requires auth
      parameters:
        - name: ref
          in: query
          required: true
          schema:
            type: string
          description: Document reference (URL, path, or identifier)
      responses:
        '200':
          description: Document found or created
          content:
            application/json:
              schema:
                type: object
                properties:
                  docId:
                    type: string
                  url:
                    type: string
                  title:
                    type: string
                  checksum:
                    type: string
                  checksumAlgorithm:
                    type: string
                  description:
                    type: string
                  createdAt:
                    type: string
                    format: date-time
                  isNew:
                    type: boolean
        '401':
          description: Authentication required (when creating new document)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /documents/{docId}/signatures/status:
    get:
      summary: Get signature status for current user
      operationId: getSignatureStatus
      tags:
        - Signatures
      security:
        - sessionCookie: []
      parameters:
        - name: docId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Signature status
          content:
            application/json:
              schema:
                type: object
                properties:
                  docId:
                    type: string
                  userEmail:
                    type: string
                  isSigned:
                    type: boolean
                  signedAt:
                    type: string
                    format: date-time
        '401':
          $ref: '#/components/responses/Unauthorized'

  /admin/documents:
    get:
      summary: List all documents (admin)
      operationId: adminListDocuments
      tags:
        - Admin
      security:
        - sessionCookie: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of all documents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      summary: Create a new document with metadata
      operationId: adminCreateDocument
      tags:
        - Admin
      security:
        - sessionCookie: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDocumentRequest'
      responses:
        '201':
          description: Document created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /admin/documents/{docId}:
    get:
      summary: Get document details (admin)
      operationId: adminGetDocument
      tags:
        - Admin
      security:
        - sessionCookie: []
      parameters:
        - name: docId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Document details with admin info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminDocumentResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      summary: Delete document
      operationId: adminDeleteDocument
      tags:
        - Admin
      security:
        - sessionCookie: []
      parameters:
        - name: docId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Document deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /admin/documents/{docId}/metadata:
    put:
      summary: Update document metadata
      operationId: adminUpdateDocument
      tags:
        - Admin
      security:
        - sessionCookie: []
      parameters:
        - name: docId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDocumentRequest'
      responses:
        '200':
          description: Document updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /admin/documents/{docId}/status:
    get:
      summary: Get complete document status
      operationId: adminGetDocumentStatus
      tags:
        - Admin
      security:
        - sessionCookie: []
      parameters:
        - name: docId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Complete document status with signature chain info
          content:
            application/json:
              schema:
                type: object
                properties:
                  docId:
                    type: string
                  title:
                    type: string
                  totalSignatures:
                    type: integer
                  expectedSigners:
                    type: integer
                  pendingSigners:
                    type: integer
                  chainIntegrity:
                    type: boolean
                  lastSignedAt:
                    type: string
                    format: date-time
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /admin/documents/{docId}/signers:
    get:
      summary: Get document with expected signers and status
      operationId: adminGetDocumentWithSigners
      tags:
        - Admin
      security:
        - sessionCookie: []
      parameters:
        - name: docId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Document with signers
          content:
            application/json:
              schema:
                type: object
                properties:
                  document:
                    $ref: '#/components/schemas/Document'
                  signers:
                    type: array
                    items:
                      $ref: '#/components/schemas/ExpectedSigner'
                  stats:
                    type: object
                    properties:
                      total:
                        type: integer
                      signed:
                        type: integer
                      pending:
                        type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    post:
      summary: Add expected signer
      operationId: adminAddExpectedSigner
      tags:
        - Admin
      security:
        - sessionCookie: []
      parameters:
        - name: docId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                name:
                  type: string
      responses:
        '201':
          description: Expected signer added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /admin/documents/{docId}/signers/{email}:
    delete:
      summary: Remove expected signer by email
      operationId: adminRemoveExpectedSigner
      tags:
        - Admin
      security:
        - sessionCookie: []
      parameters:
        - name: docId
          in: path
          required: true
          schema:
            type: string
        - name: email
          in: path
          required: true
          schema:
            type: string
            format: email
      responses:
        '200':
          description: Expected signer removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /admin/documents/{docId}/reminders:
    get:
      summary: Get reminder history
      operationId: adminGetReminderHistory
      tags:
        - Admin
      security:
        - sessionCookie: []
      parameters:
        - name: docId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Reminder history
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    sentAt:
                      type: string
                      format: date-time
                    recipientEmail:
                      type: string
                    success:
                      type: boolean
                    errorMessage:
                      type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    post:
      summary: Send reminder emails
      operationId: adminSendReminders
      tags:
        - Admin
      security:
        - sessionCookie: []
      parameters:
        - name: docId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                emails:
                  type: array
                  items:
                    type: string
                    format: email
                  description: Specific emails to send reminders to (optional, sends to all pending signers if empty)
      responses:
        '200':
          description: Reminders sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  sent:
                    type: integer
                  failed:
                    type: integer
                  errors:
                    type: array
                    items:
                      type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'


components:
  securitySchemes:
    sessionCookie:
      type: apiKey
      in: cookie
      name: ackify-session
      description: |
        Session-based authentication using encrypted HTTP-only cookies.

        **How it works:**
        1. User authenticates via OAuth2 flow (`/api/v1/auth/start`)
        2. Backend sets `ackify-session` cookie (encrypted, HTTP-only, SameSite=Lax)
        3. Cookie is automatically sent with subsequent requests
        4. Backend validates session and extracts user info

        **Security features:**
        - HTTP-only flag (prevents XSS attacks)
        - Secure flag (HTTPS only in production)
        - SameSite=Lax (CSRF protection)
        - AES-encrypted session data
        - Configurable expiration (default: 24 hours)

        **CSRF Protection:**
        For state-modifying operations (POST, PUT, DELETE), you must also include:
        - `X-CSRF-Token` header with token from `/api/v1/csrf`

  responses:
    BadRequest:
      description: Bad Request - Invalid input or malformed request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              code: "VALIDATION_ERROR"
              message: "Invalid input provided"
              details:
                field: "email"
                reason: "Invalid email format"

    Unauthorized:
      description: Unauthorized - Authentication required or invalid session
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              code: "UNAUTHORIZED"
              message: "Authentication required. Please log in."
              details:
                loginUrl: "/api/v1/auth/start"

    Forbidden:
      description: Forbidden - User lacks required permissions (e.g., admin role)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              code: "FORBIDDEN"
              message: "Admin privileges required for this operation"
              details:
                requiredRole: "admin"
                userRole: "user"

    NotFound:
      description: Not Found - Requested resource does not exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              code: "NOT_FOUND"
              message: "Document not found"
              details:
                docId: "nonexistent_doc"

    Conflict:
      description: Conflict - Resource already exists or operation violates constraint
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              code: "DUPLICATE_SIGNATURE"
              message: "You have already signed this document"
              details:
                docId: "privacy_policy_2025"
                existingSignatureId: "12345"

  schemas:
    HealthResponse:
      type: object
      required:
        - status
        - timestamp
      properties:
        status:
          type: string
          description: Service health status
          enum: ["ok", "degraded", "down"]
          example: "ok"
        timestamp:
          type: string
          format: date-time
          description: Current server timestamp
          example: "2025-01-15T10:30:00Z"
        version:
          type: string
          description: Application version (optional)
          example: "1.0.0"

    CsrfTokenResponse:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: CSRF token to include in X-CSRF-Token header for state-modifying requests
          example: "abc123def456ghi789jkl012"
          minLength: 16

    AuthStatusResponse:
      type: object
      required:
        - authenticated
      properties:
        authenticated:
          type: boolean
          description: Whether the current request is authenticated
          example: true
        user:
          allOf:
            - $ref: '#/components/schemas/User'
            - description: User info (only present if authenticated is true)

    MessageResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Success or informational message
          example: "Operation completed successfully"

    OEmbedResponse:
      type: object
      description: oEmbed response following the oEmbed specification (https://oembed.com/)
      required:
        - type
        - version
        - title
        - provider_name
        - provider_url
        - html
        - height
      properties:
        type:
          type: string
          enum: [rich]
          description: oEmbed type (always "rich" for iframe embeds)
          example: "rich"
        version:
          type: string
          description: oEmbed version
          example: "1.0"
        title:
          type: string
          description: Title of the embedded content
          example: "Document policy_2025 - Confirmations de lecture"
        provider_name:
          type: string
          description: Service name
          example: "Ackify"
        provider_url:
          type: string
          format: uri
          description: Service homepage URL
          example: "http://localhost:8080"
        html:
          type: string
          description: HTML iframe code for embedding
          example: "<iframe src=\"http://localhost:8080/embed?doc=policy_2025\" width=\"100%\" height=\"200\" frameborder=\"0\" style=\"border: 1px solid #ddd; border-radius: 6px;\" allowtransparency=\"true\"></iframe>"
        width:
          type: integer
          description: Recommended width (optional, not specified for 100% width)
        height:
          type: integer
          description: Recommended height in pixels
          example: 200

    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: string
              example: VALIDATION_ERROR
            message:
              type: string
              example: Invalid input provided
            details:
              type: object
              additionalProperties: true

    User:
      type: object
      required:
        - id
        - email
        - isAdmin
      properties:
        id:
          type: string
          description: Unique user identifier from OAuth provider (sub claim)
          example: "google-oauth2|123456789"
        email:
          type: string
          format: email
          description: User email address from OAuth provider
          example: "user@example.com"
        name:
          type: string
          description: User display name from OAuth provider
          example: "John Doe"
        isAdmin:
          type: boolean
          description: Whether user has admin privileges (determined by ACKIFY_ADMIN_EMAILS)
          example: false

    UserResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/User'

    Document:
      type: object
      required:
        - id
        - title
        - createdAt
      properties:
        id:
          type: string
          description: Unique document identifier
          example: "policy_2025"
          minLength: 1
          maxLength: 255
        title:
          type: string
          description: Document title
          example: "Company Privacy Policy 2025"
          minLength: 1
          maxLength: 500
        description:
          type: string
          description: Optional document description
          example: "Updated privacy policy for GDPR compliance"
          maxLength: 2000
        url:
          type: string
          format: uri
          description: Original document URL or reference
          example: "https://example.com/docs/privacy-policy.pdf"
        checksum:
          type: string
          description: Document content checksum for integrity verification (SHA-256, 64 hex chars)
          example: "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
          pattern: "^[a-f0-9]{64}$"
        checksumAlgorithm:
          type: string
          description: Hashing algorithm used for checksum
          example: "SHA-256"
          enum: ["SHA-256", "SHA-512"]
          default: "SHA-256"
        createdAt:
          type: string
          format: date-time
          description: Document creation timestamp
          example: "2025-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last modification timestamp
          example: "2025-01-20T14:45:00Z"
        createdBy:
          type: string
          description: User ID who created the document
          example: "google-oauth2|123456789"
        signatureCount:
          type: integer
          description: Total number of signatures collected
          example: 42
          minimum: 0
        expectedSignerCount:
          type: integer
          description: Number of expected signers registered
          example: 50
          minimum: 0
        metadata:
          type: object
          description: Additional custom metadata (JSON object)
          additionalProperties: true
          example:
            department: "Legal"
            version: "2.1"
            expiresAt: "2026-01-01T00:00:00Z"

    DocumentResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Document'

    DocumentListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Document'
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    AdminDocumentResponse:
      type: object
      properties:
        data:
          allOf:
            - $ref: '#/components/schemas/Document'
            - type: object
              properties:
                chainIntegrity:
                  type: boolean
                lastVerification:
                  type: string
                  format: date-time

    Signature:
      type: object
      required:
        - id
        - docId
        - userEmail
        - signedAt
        - signature
        - payloadHash
        - nonce
      properties:
        id:
          type: string
          description: Unique signature identifier (auto-generated)
          example: "12345"
        docId:
          type: string
          description: Document identifier this signature belongs to
          example: "policy_2025"
        userEmail:
          type: string
          format: email
          description: Email of the user who signed
          example: "user@example.com"
        userName:
          type: string
          description: Name of the user who signed
          example: "John Doe"
        userSub:
          type: string
          description: OAuth user subject identifier
          example: "google-oauth2|123456789"
        signedAt:
          type: string
          format: date-time
          description: Timestamp when signature was created
          example: "2025-01-15T10:30:00Z"
        signature:
          type: string
          description: Ed25519 cryptographic signature (base64 encoded)
          example: "YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFy"
          pattern: "^[A-Za-z0-9+/]+=*$"
        payloadHash:
          type: string
          description: SHA-256 hash of the signed payload for integrity verification
          example: "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
          pattern: "^[a-f0-9]{64}$"
        nonce:
          type: string
          description: Unique nonce for replay attack protection
          example: "1234567890abcdef"
          minLength: 16
        prevHash:
          type: string
          description: Hash of previous signature in chain (blockchain-like integrity)
          example: "a1b2c3d4e5f6789a1b2c3d4e5f6789a1b2c3d4e5f6789a1b2c3d4e5f6789a1b2"
          pattern: "^[a-f0-9]{64}$"
        serviceInfo:
          type: object
          description: Information about the service/referer that initiated the signature
          properties:
            name:
              type: string
              description: Service name (GitHub, GitLab, Notion, etc.)
              example: "GitHub"
            icon:
              type: string
              description: Service icon URL or identifier
              example: "github-logo.svg"
            type:
              type: string
              description: Service type
              example: "git-hosting"
            referrer:
              type: string
              format: uri
              description: Original referrer URL
              example: "https://github.com/user/repo"
        docTitle:
          type: string
          description: Title of the signed document (cached for display)
          example: "Company Privacy Policy 2025"
        docUrl:
          type: string
          format: uri
          description: URL of the signed document (if applicable)
          example: "https://example.com/docs/privacy-policy.pdf"

    SignatureResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Signature'

    SignatureListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Signature'
        meta:
          $ref: '#/components/schemas/PaginationMeta'

    CreateSignatureRequest:
      type: object
      required:
        - docId
      properties:
        docId:
          type: string
          description: Document identifier to sign
          example: "policy_2025"
          minLength: 1
          maxLength: 255
        referer:
          type: string
          format: uri
          description: Optional referer URL (where the signature request originated)
          example: "https://github.com/user/repo/pull/123"

    ExpectedSigner:
      type: object
      required:
        - id
        - email
        - addedAt
        - hasSigned
      properties:
        id:
          type: integer
          description: Unique identifier for expected signer entry
          example: 1
        email:
          type: string
          format: email
          description: Email address of expected signer
          example: "employee@example.com"
        name:
          type: string
          description: Optional display name for expected signer
          example: "Jane Smith"
          maxLength: 255
        addedAt:
          type: string
          format: date-time
          description: When this signer was added to expected list
          example: "2025-01-15T09:00:00Z"
        addedBy:
          type: string
          description: User ID who added this expected signer
          example: "google-oauth2|admin123"
        hasSigned:
          type: boolean
          description: Whether this expected signer has already signed
          example: false
        signedAt:
          type: string
          format: date-time
          description: Timestamp when the signer signed (null if not signed yet)
          example: "2025-01-15T10:30:00Z"
          nullable: true
        notes:
          type: string
          description: Optional admin notes about this expected signer
          example: "Key stakeholder from Legal dept"
          maxLength: 1000

    ExpectedSignersResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ExpectedSigner'

    AddExpectedSignersRequest:
      type: object
      required:
        - signers
      properties:
        signers:
          type: array
          items:
            type: object
            required:
              - email
            properties:
              email:
                type: string
                format: email
              name:
                type: string

    CreateDocumentRequest:
      type: object
      required:
        - id
        - title
      properties:
        id:
          type: string
          description: Unique document identifier (must be URL-safe)
          example: "privacy_policy_2025"
          minLength: 1
          maxLength: 255
          pattern: "^[a-zA-Z0-9_-]+$"
        title:
          type: string
          description: Document title
          example: "Company Privacy Policy 2025"
          minLength: 1
          maxLength: 500
        description:
          type: string
          description: Optional document description
          example: "Updated privacy policy for GDPR compliance"
          maxLength: 2000
        url:
          type: string
          format: uri
          description: Original document URL
          example: "https://example.com/docs/privacy-policy.pdf"
        checksum:
          type: string
          description: SHA-256 checksum of document content
          example: "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
          pattern: "^[a-f0-9]{64}$"
        checksumAlgorithm:
          type: string
          description: Hashing algorithm (defaults to SHA-256)
          example: "SHA-256"
          enum: ["SHA-256", "SHA-512"]
          default: "SHA-256"
        metadata:
          type: object
          description: Additional custom metadata
          additionalProperties: true
          example:
            department: "Legal"
            version: "2.1"

    UpdateDocumentRequest:
      type: object
      properties:
        title:
          type: string
          description: Updated document title
          example: "Company Privacy Policy 2025 (Revised)"
          minLength: 1
          maxLength: 500
        description:
          type: string
          description: Updated document description
          example: "Updated privacy policy with new data retention clauses"
          maxLength: 2000
        url:
          type: string
          format: uri
          description: Updated document URL
          example: "https://example.com/docs/privacy-policy-v2.pdf"
        checksum:
          type: string
          description: Updated SHA-256 checksum (64 hex characters)
          example: "a1b2c3d4e5f6789a1b2c3d4e5f6789a1b2c3d4e5f6789a1b2c3d4e5f6789a1b2"
          pattern: "^[a-f0-9]{64}$"
        checksumAlgorithm:
          type: string
          description: Hashing algorithm
          example: "SHA-256"
          enum: ["SHA-256", "SHA-512"]
        metadata:
          type: object
          description: Updated custom metadata
          additionalProperties: true

    PaginationMeta:
      type: object
      required:
        - page
        - limit
        - total
        - totalPages
      properties:
        page:
          type: integer
          description: Current page number (1-indexed)
          example: 1
          minimum: 1
        limit:
          type: integer
          description: Number of items per page
          example: 20
          minimum: 1
          maximum: 100
        total:
          type: integer
          description: Total number of items across all pages
          example: 157
          minimum: 0
        totalPages:
          type: integer
          description: Total number of pages
          example: 8
          minimum: 0