## SPDX-License-Identifier: AGPL-3.0-or-later
name: ackify-ce

services:
  ackify-migrate:
    image: btouchard/ackify-ce
    container_name: ackify-ce-migrate
    environment:
      ACKIFY_LOG_LEVEL: "${ACKIFY_LOG_LEVEL}"
      ACKIFY_BASE_URL: "${ACKIFY_BASE_URL}"
      ACKIFY_ORGANISATION: "${ACKIFY_ORGANISATION}"
      ACKIFY_DB_DSN: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@ackify-db:5432/${POSTGRES_DB}?sslmode=disable"
      ACKIFY_OAUTH_PROVIDER: "${ACKIFY_OAUTH_PROVIDER}"
      ACKIFY_OAUTH_CLIENT_ID: "${ACKIFY_OAUTH_CLIENT_ID}"
      ACKIFY_OAUTH_CLIENT_SECRET: "${ACKIFY_OAUTH_CLIENT_SECRET}"
    depends_on:
      ackify-db:
        condition: service_healthy
    networks:
      - internal
    command: ["/app/migrate", "up"]
    entrypoint: []
    restart: "no"

  ackify-ce:
    image: btouchard/ackify-ce
    container_name: ackify-ce
    restart: unless-stopped
    environment:
      ACKIFY_LOG_LEVEL: "${ACKIFY_LOG_LEVEL}"
      ACKIFY_BASE_URL: "https://${APP_DNS}"
      ACKIFY_ORGANISATION: "${ACKIFY_ORGANISATION}"
      ACKIFY_DB_DSN: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@ackify-db:5432/${POSTGRES_DB}?sslmode=disable"
      ACKIFY_OAUTH_PROVIDER: "${ACKIFY_OAUTH_PROVIDER}"
      ACKIFY_OAUTH_CLIENT_ID: "${ACKIFY_OAUTH_CLIENT_ID}"
      ACKIFY_OAUTH_CLIENT_SECRET: "${ACKIFY_OAUTH_CLIENT_SECRET}"
      # -- NEEDED FOR CUSTOM PROVIDER
      # ACKIFY_OAUTH_AUTH_URL: "${ACKIFY_OAUTH_AUTH_URL}"
      # ACKIFY_OAUTH_TOKEN_URL: "${ACKIFY_OAUTH_TOKEN_URL}"
      # ACKIFY_OAUTH_USERINFO_URL: "${ACKIFY_OAUTH_USERINFO_URL}"
      # ACKIFY_OAUTH_SCOPES: "${ACKIFY_OAUTH_SCOPES}"
      # -- END NEEDED FOR CUSTOM PROVIDER
      ACKIFY_OAUTH_ALLOWED_DOMAIN: "${ACKIFY_OAUTH_ALLOWED_DOMAIN}"
      ACKIFY_OAUTH_COOKIE_SECRET: "${ACKIFY_OAUTH_COOKIE_SECRET}"
      ACKIFY_ED25519_PRIVATE_KEY: "${ACKIFY_ED25519_PRIVATE_KEY}"
      ACKIFY_LISTEN_ADDR: ":8080"
      ACKIFY_ADMIN_EMAILS: "${ACKIFY_ADMIN_EMAILS}"
    depends_on:
      ackify-migrate:
        condition: service_completed_successfully
      ackify-db:
        condition: service_healthy
    networks:
      - internal
    ports:
      - "8080:8080"

  ackify-db:
    image: postgres:16-alpine
    container_name: ackify-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ackify_data:/var/lib/postgresql/data
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  internal:

volumes:
  ackify_data:
